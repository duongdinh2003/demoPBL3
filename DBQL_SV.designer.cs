#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BT07
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="QL_SV")]
	public partial class DBQL_SVDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertLopSH(LopSH instance);
    partial void UpdateLopSH(LopSH instance);
    partial void DeleteLopSH(LopSH instance);
    partial void InsertSV(SV instance);
    partial void UpdateSV(SV instance);
    partial void DeleteSV(SV instance);
    #endregion
		
		public DBQL_SVDataContext() : 
				base(global::BT07.Properties.Settings.Default.QL_SVConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DBQL_SVDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBQL_SVDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBQL_SVDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBQL_SVDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<LopSH> LopSHes
		{
			get
			{
				return this.GetTable<LopSH>();
			}
		}
		
		public System.Data.Linq.Table<SV> SVs
		{
			get
			{
				return this.GetTable<SV>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LopSH")]
	public partial class LopSH : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IDLop;
		
		private string _NameLop;
		
		private EntitySet<SV> _SVs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDLopChanging(string value);
    partial void OnIDLopChanged();
    partial void OnNameLopChanging(string value);
    partial void OnNameLopChanged();
    #endregion
		
		public LopSH()
		{
			this._SVs = new EntitySet<SV>(new Action<SV>(this.attach_SVs), new Action<SV>(this.detach_SVs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDLop", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IDLop
		{
			get
			{
				return this._IDLop;
			}
			set
			{
				if ((this._IDLop != value))
				{
					this.OnIDLopChanging(value);
					this.SendPropertyChanging();
					this._IDLop = value;
					this.SendPropertyChanged("IDLop");
					this.OnIDLopChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameLop", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string NameLop
		{
			get
			{
				return this._NameLop;
			}
			set
			{
				if ((this._NameLop != value))
				{
					this.OnNameLopChanging(value);
					this.SendPropertyChanging();
					this._NameLop = value;
					this.SendPropertyChanged("NameLop");
					this.OnNameLopChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LopSH_SV", Storage="_SVs", ThisKey="IDLop", OtherKey="ID_Lop")]
		public EntitySet<SV> SVs
		{
			get
			{
				return this._SVs;
			}
			set
			{
				this._SVs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SVs(SV entity)
		{
			this.SendPropertyChanging();
			entity.LopSH = this;
		}
		
		private void detach_SVs(SV entity)
		{
			this.SendPropertyChanging();
			entity.LopSH = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SV")]
	public partial class SV : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MSSV;
		
		private string _NameSV;
		
		private string _ID_Lop;
		
		private System.DateTime _NS;
		
		private float _DTB;
		
		private bool _Gender;
		
		private bool _Photo;
		
		private bool _HB;
		
		private bool _CCCD;
		
		private EntityRef<LopSH> _LopSH;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMSSVChanging(string value);
    partial void OnMSSVChanged();
    partial void OnNameSVChanging(string value);
    partial void OnNameSVChanged();
    partial void OnID_LopChanging(string value);
    partial void OnID_LopChanged();
    partial void OnNSChanging(System.DateTime value);
    partial void OnNSChanged();
    partial void OnDTBChanging(float value);
    partial void OnDTBChanged();
    partial void OnGenderChanging(bool value);
    partial void OnGenderChanged();
    partial void OnPhotoChanging(bool value);
    partial void OnPhotoChanged();
    partial void OnHBChanging(bool value);
    partial void OnHBChanged();
    partial void OnCCCDChanging(bool value);
    partial void OnCCCDChanged();
    #endregion
		
		public SV()
		{
			this._LopSH = default(EntityRef<LopSH>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MSSV", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MSSV
		{
			get
			{
				return this._MSSV;
			}
			set
			{
				if ((this._MSSV != value))
				{
					this.OnMSSVChanging(value);
					this.SendPropertyChanging();
					this._MSSV = value;
					this.SendPropertyChanged("MSSV");
					this.OnMSSVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameSV", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string NameSV
		{
			get
			{
				return this._NameSV;
			}
			set
			{
				if ((this._NameSV != value))
				{
					this.OnNameSVChanging(value);
					this.SendPropertyChanging();
					this._NameSV = value;
					this.SendPropertyChanged("NameSV");
					this.OnNameSVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Lop", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string ID_Lop
		{
			get
			{
				return this._ID_Lop;
			}
			set
			{
				if ((this._ID_Lop != value))
				{
					if (this._LopSH.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_LopChanging(value);
					this.SendPropertyChanging();
					this._ID_Lop = value;
					this.SendPropertyChanged("ID_Lop");
					this.OnID_LopChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NS", DbType="Date NOT NULL")]
		public System.DateTime NS
		{
			get
			{
				return this._NS;
			}
			set
			{
				if ((this._NS != value))
				{
					this.OnNSChanging(value);
					this.SendPropertyChanging();
					this._NS = value;
					this.SendPropertyChanged("NS");
					this.OnNSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DTB", DbType="Real NOT NULL")]
		public float DTB
		{
			get
			{
				return this._DTB;
			}
			set
			{
				if ((this._DTB != value))
				{
					this.OnDTBChanging(value);
					this.SendPropertyChanging();
					this._DTB = value;
					this.SendPropertyChanged("DTB");
					this.OnDTBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Bit NOT NULL")]
		public bool Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Photo", DbType="Bit NOT NULL")]
		public bool Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HB", DbType="Bit NOT NULL")]
		public bool HB
		{
			get
			{
				return this._HB;
			}
			set
			{
				if ((this._HB != value))
				{
					this.OnHBChanging(value);
					this.SendPropertyChanging();
					this._HB = value;
					this.SendPropertyChanged("HB");
					this.OnHBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CCCD", DbType="Bit NOT NULL")]
		public bool CCCD
		{
			get
			{
				return this._CCCD;
			}
			set
			{
				if ((this._CCCD != value))
				{
					this.OnCCCDChanging(value);
					this.SendPropertyChanging();
					this._CCCD = value;
					this.SendPropertyChanged("CCCD");
					this.OnCCCDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LopSH_SV", Storage="_LopSH", ThisKey="ID_Lop", OtherKey="IDLop", IsForeignKey=true)]
		public LopSH LopSH
		{
			get
			{
				return this._LopSH.Entity;
			}
			set
			{
				LopSH previousValue = this._LopSH.Entity;
				if (((previousValue != value) 
							|| (this._LopSH.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LopSH.Entity = null;
						previousValue.SVs.Remove(this);
					}
					this._LopSH.Entity = value;
					if ((value != null))
					{
						value.SVs.Add(this);
						this._ID_Lop = value.IDLop;
					}
					else
					{
						this._ID_Lop = default(string);
					}
					this.SendPropertyChanged("LopSH");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
